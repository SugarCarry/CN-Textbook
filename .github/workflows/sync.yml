# 工作流名称
name: Sync Upstream Repository

# 触发工作流的事件
on:
  # 按计划运行：每天凌晨2点 (UTC) 检查并同步一次
  schedule:
    - cron: '0 2 * * *' # 您可以根据需要修改这个cron表达式
      # cron表达式说明：
      # ┌───────────── min (0 - 59)
      # │ ┌───────────── hour (0 - 23)
      # │ │ ┌───────────── day of month (1 - 31)
      # │ │ │ ┌───────────── month (1 - 12)
      # │ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday)
      # │ │ │ │ │
      # * * * * * command to be executed

  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  # 定义一个名为 'sync' 的任务
  sync:
    # 运行在最新的 Ubuntu 虚拟机上
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出（clone）您的仓库代码
      # actions/checkout@v4 是 GitHub 官方提供的 Action，用于检出您的仓库
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 获取完整的提交历史，这对于合并很重要
          fetch-depth: 0

      # 步骤 2: 配置 Git 用户信息
      # 使用 GitHub Actions 机器人身份进行提交
      - name: Set Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 步骤 3: 添加上游仓库作为远程仓库
      # 将 happycola233/tchMaterial-parser 添加为名为 'upstream' 的远程仓库
      - name: Add upstream remote
        run: git remote add upstream https://github.com/happycola233/tchMaterial-parser.git

      # 步骤 4: 从上游仓库拉取最新的变化
      - name: Fetch upstream
        run: git fetch upstream

      # 步骤 5: 合并上游仓库的指定分支到您的当前分支
      # 假设您和上游仓库的主分支都是 'main'。如果不是，请修改 'main' 为正确的分支名称。
      # --allow-unrelated-histories 选项在两个分支没有共同祖先时允许合并，
      # 在第一次同步 fork 仓库时可能需要，但通常不需要。如果您的仓库是直接 fork 的，可以移除此选项。
      # 如果合并过程中出现冲突，此步骤会失败，工作流也会停止。您需要手动解决冲突。
      - name: Merge upstream branch
        run: git merge upstream/main --allow-unrelated-histories
        # 注意：这里假设主分支是 'main'。请检查您的仓库和上游仓库的主分支名称，如果不同，请修改 'upstream/main' 和下一步的 'origin main'。
        # 如果您更喜欢使用 rebase 而不是 merge，可以将上一行替换为：
        # run: git rebase upstream/main

      # 步骤 6: 将合并后的变化推送到您的 GitHub 仓库
      # 使用 GITHUB_TOKEN 进行认证，actions/checkout@v4 会自动处理认证
      - name: Push changes
        run: git push origin main
        # 如果您在上一步使用了 rebase，并且需要强制推送（如果您的分支有冲突解决），可以使用：
        # run: git push --force-with-lease origin main
